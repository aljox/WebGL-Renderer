precision mediump float;

struct Material {
    vec3 s_ambient/*material*/;
    vec3 s_diffuse/*material*/;
    vec3 s_specular/*material*/;
    float s_shininess/*material*/;
};

struct Light {
    vec3 s_lightColour/*light*/;
    float s_ambient/*light*/;
    float s_diffuse/*light*/;
    float s_specular/*light*/;
};

uniform Material material;
uniform Light light;

varying vec3 v_normal;
varying vec3 v_lightPos;
varying vec3 v_fragPosition;

void main() {
  // ambient
  vec3 ambient =  light.s_ambient * material.s_ambient;

  // diffuse
  vec3 norm = normalize(v_normal);
  vec3 incident = normalize(v_lightPos - v_fragPosition);
  float diff = max(dot(incident, norm), 0.0);
  vec3 diffuse = light.s_diffuse * (material.s_diffuse * diff) * light.s_lightColour;

  // specular
  vec3 viewDir = normalize(-v_fragPosition);
  vec3 reflectDir = reflect(-incident, norm);
  float spec = max(dot(viewDir, reflectDir), 0.0);
  spec = pow(spec, material.s_shininess);
  vec3 specular = light.s_specular * (material.s_specular * spec) * light.s_lightColour;

  vec3 result = ambient + diffuse + specular;
  gl_FragColor = vec4(result, 1.0);
}
